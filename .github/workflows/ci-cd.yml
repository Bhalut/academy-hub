name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:8.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017 --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:latest
        ports:
          - 6379:6379

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Hatch
        run: pip install hatch

      - name: Install dependencies
        run: hatch env create && hatch run pip install .

      - name: Run linters and type checks
        run: |
          hatch run black --check src
          hatch run isort --check-only src
          hatch run mypy src

      - name: Run Tests
        run: hatch run pytest services/tracking/tests --cov=services/tracking/src --cov-report=xml

      - name: Build Docker Image
        run: |
          cd services/tracking
          docker build -t tracking-service .

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Build Docker Image
        run: docker build -t tracking-service:latest -f services/tracking/Dockerfile .

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          echo "$SSH_PRIVATE_KEY" > deploy_key.pem
          chmod 600 deploy_key.pem
          ssh -i deploy_key.pem $SERVER_USER@$SERVER_HOST << 'EOF'
            docker pull tracking-service:latest
            docker-compose up -d
          EOF
